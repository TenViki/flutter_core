# version 1.8.0 - https://dcm.dev/changelog/
dart_code_metrics:
  pubspec-rules:
    ### Pubspec
    - avoid-any-version
    # - avoid-dependency-overrides
    - banned-dependencies
    - prefer-caret-version-syntax
    # - prefer-correct-package-name
    - prefer-correct-screenshots
    - prefer-publish-to-none
    - prefer-semver-version

  rules:
    ### Common
    # - arguments-ordering # way too pedantic
    - avoid-accessing-other-classes-private-members
    - avoid-async-call-in-sync-function
    # - avoid-banned-file-names
    # - avoid-banned-imports
    # - avoid-banned-types
    # - avoid-barrel-files # for now we use them
    - avoid-bottom-type-in-patterns
    - avoid-bottom-type-in-records
    - avoid-cascade-after-if-null
    - avoid-collapsible-if
    - avoid-collection-methods-with-unrelated-types
    - avoid-declaring-call-method
    - avoid-double-slash-imports
    - avoid-duplicate-exports
    - avoid-duplicate-mixins
    - avoid-duplicate-named-imports
    - avoid-duplicate-patterns
    - avoid-dynamic
    - avoid-equal-expressions
    - avoid-explicit-pattern-field-name
    # - avoid-explicit-type-declaration # public API
    - avoid-function-type-in-records
    - avoid-future-tostring
    - avoid-generics-shadowing
    - avoid-global-state
    - avoid-ignoring-return-values
    - avoid-importing-entrypoint-exports
    - avoid-inverted-boolean-checks
    - avoid-keywords-in-wildcard-pattern
    # - avoid-late-keyword
    # - avoid-long-functions # way too pedantic
    # - avoid-long-parameter-list: # way too pedantic
        # ignore-optional: true # exclude optional and (non-required) named parameters
    - avoid-long-records
    - avoid-map-keys-contains
    - avoid-missed-calls
    - avoid-missing-enum-constant-in-map
    - avoid-misused-wildcard-pattern
    - avoid-mixing-named-and-positional-fields
    # - avoid-mutating-parameters # we use ValueNotifier etc.
    # - avoid-negated-conditions # sometimes it might be better
    - avoid-nested-conditional-expressions:
        acceptable-level: 2
    - avoid-nested-futures
    - avoid-nested-records
    - avoid-nested-streams-and-futures
    - avoid-nested-switch-expressions
    - avoid-nested-switches
    - avoid-non-ascii-symbols:
        exclude:
          - test/**
    - avoid-non-null-assertion:
        exclude:
          - test/**
    - avoid-nullable-interpolation
    - avoid-one-field-records
    - avoid-passing-async-when-sync-expected:
        exclude:
          - test/**
    - avoid-positional-record-field-access
    - avoid-redundant-async
    - avoid-redundant-else
    - avoid-redundant-positional-field-name
    - avoid-redundant-pragma-inline
    - avoid-self-assignment
    - avoid-self-compare
    - avoid-shadowed-extension-methods
    - avoid-shadowing:
        ignore-parameters: true
        ignored-names:
          - context
    # - avoid-similar-names # way too pedantic
    - avoid-substring
    - avoid-throw-in-catch-block
    - avoid-throw-objects-without-tostring
    - avoid-top-level-members-in-tests
    - avoid-unassigned-late-fields-keyword
    - avoid-uncaught-future-errors
    - avoid-unnecessary-call
    - avoid-unnecessary-conditionals
    - avoid-unnecessary-futures
    - avoid-unnecessary-negations
    - avoid-unnecessary-nullable-return-type
    - avoid-unnecessary-reassignment
    - avoid-unnecessary-return
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - avoid-unrelated-type-casts
    - avoid-unsafe-collection-methods
    - avoid-unused-generics
    - avoid-unused-instances
    - avoid-unused-parameters
    # - banned-usage
    - binary-expression-operand-order
    - double-literal-format
    - enum-constants-ordering
    - format-comment:
        only-doc-comments: true
    # - format-test-name # good but painful
    - function-always-returns-null
    - map-keys-ordering:
        exclude:
          - test/**
    - match-class-name-pattern
    # - match-positional-field-names-on-assignment # not compatible with avoid-redundant-positional-field-name
    - member-ordering:
        order:
          - public-fields
          - private-fields
          - public-getters
          - private-getters
          - public-setters
          - private-setters
          - constructors
          - named-constructors
          - public-methods
          - private-methods
        widgets-order:
          - public-fields
          - private-fields
          - public-getters
          - private-getters
          - constructors
          - named-constructors
          - init-state-method
          - overridden-public-methods
          - public-methods
          - private-methods
          - build-method
    - missing-test-assertion
    - move-records-to-typedefs:
        min-fields: 3
        min-occurrences: 3
    - newline-before-case # TODO
    - newline-before-return
    - no-boolean-literal-compare:
        allow-false: true # allows `variable == false` instead of just `!variable`
    - no-empty-block
    - no-equal-arguments:
        ignored-parameters:
          - height
          - width
          - top
          - right
          - bottom
          - left
          - topLeft
          - topRight
          - bottomLeft
          - bottomRight
    - no-equal-conditions
    - no-equal-nested-conditions
    - no-equal-switch-case
    - no-equal-switch-expression-cases
    - no-equal-then-else
    #- no-magic-number: # way to strict for default values of parameters etc.
    - no-object-declaration
    - prefer-async-await
    - prefer-bytes-builder
    - prefer-commenting-analyzer-ignores
    - prefer-conditional-expressions
    # - prefer-correct-error-name # we use `e`
    - prefer-correct-for-loop-increment
    - prefer-correct-future-return-type
    # - prefer-correct-identifier-length # way too pedantic
    # - prefer-correct-json-casts # overkill213
    - prefer-correct-stream-return-type
    - prefer-correct-switch-length
    - prefer-correct-test-file-name
    - prefer-correct-type-name
    - prefer-declaring-const-constructor
    - prefer-early-return
    - prefer-enums-by-name
    - prefer-explicit-parameter-names
    - prefer-first
    - prefer-immediate-return
    - prefer-iterable-of
    - prefer-last
    - prefer-match-file-name:
        exclude:
          - test/**
    - prefer-moving-to-variable:
        allowed-duplicated-chains: 3
        exclude:
          - test/**
    - prefer-named-boolean-parameters
    - prefer-parentheses-with-if-null
    - prefer-public-exception-classes
    - prefer-return-await
    # - prefer-returning-conditional-expressions # annoying sometimes
    - prefer-simpler-patterns-null-check
    - prefer-static-class:
        ignore-private: true
        ignore-names:
          - (.*)Provider
          - use(.*)
    - prefer-test-matchers
    - prefer-trailing-comma
    # - prefer-type-over-var # we prefer inference
    # - prefer-unwrapping-future-or # we are ok with awaiting values
    - prefer-visible-for-testing-on-members
    - prefer-wildcard-pattern
    - tag-name
    - unnecessary-trailing-comma:
        max-width: 80

    ### Flutter
    - add-copy-with
    - always-remove-listener
    - avoid-border-all
    - avoid-empty-setstate
    - avoid-expanded-as-spacer
    - avoid-incomplete-copy-with
    - avoid-inherited-widget-in-initstate
    - avoid-late-context
    - avoid-missing-image-alt
    - avoid-recursive-widget-calls
    - avoid-returning-widgets
    - avoid-shrink-wrap-in-lists
    - avoid-state-constructors
    - avoid-stateless-widget-initialized-fields
    - avoid-unnecessary-overrides-in-state
    - avoid-unnecessary-setstate
    - avoid-unnecessary-stateful-widgets
    - avoid-wrapping-in-padding
    - check-for-equals-in-render-object-setters
    - consistent-update-render-object
    - dispose-fields
    - prefer-action-button-tooltip
    - prefer-const-border-radius
    - prefer-correct-edge-insets-constructor
    - prefer-dedicated-media-query-methods
    - prefer-define-hero-tag
    - prefer-extracting-callbacks
    - prefer-single-widget-per-file:
        ignore-private-widgets: true
    - prefer-text-rich
    - prefer-using-list-view
    # - prefer-widget-private-members # cannot use this.field in constructor
    - proper-super-calls
    - use-setstate-synchronously

    ### Provider
    - avoid-instantiating-in-value-provider
    - avoid-read-inside-build
    - avoid-watch-outside-build
    - dispose-providers
    - prefer-multi-provider

    ### Bloc
    - avoid-bloc-public-methods
    # - avoid-cubits
    # - avoid-passing-bloc-to-bloc
    - check-is-not-closed-after-async-gap
    - prefer-correct-bloc-provider
    - prefer-multi-bloc-provider

    ### Equatable
    - extend-equatable
    - list-all-equatable-fields

    ### Flame - not used

    ### Intl - not used

    ### Angular - not used

    ### Patrol
    - prefer-custom-finder-over-find
    - prefer-symbol-over-key
